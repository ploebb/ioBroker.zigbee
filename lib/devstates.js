'use strict';

const rgb = require(__dirname + '/rgb.js');
const utils = require(__dirname + '/utils.js');

/* states for device:
   id - sysname of state, id
   name - display name of state
   prop - attr name of payload object with value of state
   icon - url of state icon
   role - state role
   write, read - allow to write and read state from admin
   type - type of value
   isEvent - sign of clearing the value after 300ms
   isOption - if state is internal setting, not to be sent to device
   getter - result of call is the value of state. if value is undefined - state not apply
   setter - result of call is the value for publish to zigbee
   setterOpt - result of call is the options for publish to zigbee
   setattr - name of converter to zigbee, if it different from "prop" value
   epname - endpoint name for publish
*/

const timers = {};

const states = {
    groups: {
        id: 'groups',
        name: 'Groups',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        isOption: true,
    },
    link_quality: {
        id: 'link_quality',
        prop: 'linkquality',
        name: 'Link quality',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        min: 0,
        max: 254
    },
    available: {
      id: 'available',
      prop: 'available',
      name: 'Available',
      icon: undefined,
      role: 'state',
      write: false,
      read: true,
      type: 'boolean'
    },
    checking: { // press button for checking
        id: 'checking',
        name: 'Start checking process',
        icon: undefined,
        role: 'button',
        write: true,
        read: false,
        type: 'boolean',
    },
    click: {
        id: 'click',
        name: 'Click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'single') ? true : undefined,
    },
    double_click: {
        id: 'double_click',
        prop: 'click',
        name: 'Double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'double') ? true : undefined,
    },
    triple_click: {
        id: 'triple_click',
        prop: 'click',
        name: 'Triple click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'triple') ? true : undefined,
    },
    quad_click: {
        id: 'quad_click',
        prop: 'click',
        name: 'Quadruple click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'quadruple') ? true : undefined,
    },
    many_click: {
        id: 'many_click',
        prop: 'click',
        name: 'Many clicks event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'many') ? true : undefined,
    },
    long_click: {
        id: 'long_click',
        prop: 'click',
        name: 'Long click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'long') ? true : undefined,
    },
    voltage: {
        id: 'voltage',
        name: 'Battery voltage',
        icon: 'img/battery_v.png',
        role: 'battery.voltage',
        write: false,
        read: true,
        type: 'number',
        unit: 'V',
        getter: payload => payload.voltage / 1000,
    },
    ecozy_voltage: {
        id: 'voltage',
        name: 'Battery voltage',
        icon: 'img/battery_v.png',
        role: 'battery.voltage',
        write: false,
        read: true,
        type: 'number',
        unit: 'V',
        getter: payload => payload.voltage * 10,
    },
    battery: {
        id: 'battery',
        prop: 'battery',
        name: 'Battery percent',
        icon: 'img/battery_p.png',
        role: 'battery.percent',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        min: 0,
        max: 100
    },
    left_click: {
        id: 'left_click',
        prop: 'click',
        name: 'Left click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'left') ? true : undefined,
    },
    right_click: {
        id: 'right_click',
        prop: 'click',
        name: 'Right click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'right') ? true : undefined,
    },
    both_click: {
        id: 'both_click',
        prop: 'click',
        name: 'Both click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'both') ? true : undefined,
    },
   left_click_long: {
        id: 'left_click_long',
        prop: 'click',
        name: 'Left click long event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'left_long') ? true : undefined,
    },
    left_click_double: {
        id: 'left_click_double',
        prop: 'click',
        name: 'Left click double event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'left_double') ? true : undefined,
    },
   right_click_long: {
        id: 'right_click_long',
        prop: 'click',
        name: 'Right click long event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'right_long') ? true : undefined,
    },
    right_click_double: {
        id: 'right_click_double',
        prop: 'click',
        name: 'Right click double event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'right_double') ? true : undefined,
    },
    both_click_long: {
        id: 'both_click_long',
        prop: 'click',
        name: 'Both click long event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'both_long') ? true : undefined,
    },
    both_click_double: {
        id: 'both_click_double',
        prop: 'click',
        name: 'Both click double event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'both_double') ? true : undefined,
    },
    state: {
        id: 'state',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setterOpt: (value, options) => {
            const stateValue = (value ? 'ON' : 'OFF');
            return {state: stateValue};
        },
        inOptions: true,
    },
    stateEp: {
        id: 'state',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        epname: 'default',
    },
    left_state: {
        id: 'left_state',
        prop: 'state_left',
        name: 'Left switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_left === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'left',
    },
    right_state: {
        id: 'right_state',
        prop: 'state_right',
        name: 'Right switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_right === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'right',
    },
    left_button: {
        id: 'left_button',
        prop: 'button_left',
        name: 'Left button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.button_left === 'hold')
    },
    right_button: {
        id: 'right_button',
        prop: 'button_right',
        name: 'Right button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.button_right === 'hold'),
    },
    temperature: {
        id: 'temperature',
        name: 'Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: false,
        read: true,
        type: 'number',
        unit: 'Â°C'
    },
    humidity: {
        id: 'humidity',
        name: 'Humidity',
        icon: undefined,
        role: 'value.humidity',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        min: 0,
        max: 100
    },
    pressure: {
        id: 'pressure',
        name: 'Pressure',
        icon: undefined,
        role: 'value.pressure',
        write: false,
        read: true,
        type: 'number',
        unit: 'hPa',
        min: 0,
        max: 100
    },
    illuminance: {
        id: 'illuminance',
        name: 'Illuminance',
        icon: undefined,
        role: 'value.brightness',
        write: false,
        read: true,
        type: 'number',
        unit: 'lux'
    },
    occupancy: {
        id: 'occupancy',
        name: 'Occupancy',
        icon: undefined,
        role: 'indicator.motion',
        write: false,
        read: true,
        type: 'boolean',
    },
    occupancy_event: {
        id: 'occupancy',
        name: 'Occupancy event',
        icon: undefined,
        role: 'indicator.motion',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    occupancy_pirOToUDelay: {
        // this is different from occupancy_timeout,
        // is writable timeout (to device).
        id: 'occupancy_timeout',
        prop: 'occupancy_timeout',
        name: 'Delay Occupied to Unoccupied',
        icon: undefined,
        role: 'variable',
        write: true,
        read: true,
        type: 'number',
        epname: 'ep2', // philips hue sml001
    },
    no_motion: {
        id: 'no_motion',
        prop: 'occupancy',
        name: 'Time from last motion',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'seconds',
        prepublish: (devId, value, callback, options) => {
            if (value) {
                if (timers[devId]) {
                    clearInterval(timers[devId]);
                    delete timers[devId];
                }
                callback(0);
            } else {
                if (!timers[devId]) {
                    const hasTimeout = options && options.hasOwnProperty('occupancy_timeout');
                    let counter = hasTimeout ? options.occupancy_timeout : 60;
                    callback(counter);
                    timers[devId] = setInterval(() => {
                        counter = counter + 10;
                        callback(counter);
                        if (counter > 1800) { // cancel after 1800 sec
                            clearInterval(timers[devId]);
                            delete timers[devId];
                        }
                    }, 10000); // update every 10 second
                }
            }
        }
    },
    contact: {
        id: 'contact',
        name: 'Contact event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean'
    },
    opened: {
        id: 'opened',
        prop: 'contact',
        name: 'Is open',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => !payload.contact,
    },
    water_detected: {
        id: 'detected',
        prop: 'water_leak',
        name: 'Water leak detected',
        icon: undefined,
        role: 'indicator.leakage',
        write: false,
        read: true,
        type: 'boolean'
    },
    gas_detected: {
        id: 'detected',
        prop: 'gas',
        name: 'Gas leak detected',
        icon: undefined,
        role: 'indicator.alarm.fire',
        write: false,
        read: true,
        type: 'boolean'
    },
    smoke_detected: {
        id: 'detected',
        prop: 'smoke',
        name: 'Smoke leak detected',
        icon: undefined,
        role: 'indicator.alarm.fire',
        write: false,
        read: true,
        type: 'boolean'
    },
    smoke_detected2: {   // for Heiman
        id: 'smoke',
        prop: 'smoke',
        name: 'Smoke leak detected',
        icon: undefined,
        role: 'indicator.alarm.fire',
        write: false,
        read: true,
        type: 'boolean'
    },
    co_detected: {   // for Heiman
        id: 'carbon_monoxide',
        prop: 'carbon_monoxide',
        name: 'CO leak detected',
        icon: undefined,
        role: 'indicator.alarm.carbon_monoxide',
        write: false,
        read: true,
        type: 'boolean'
    },
    heiman_batt_low: {
        id: 'battery_low',
        prop: 'battery_low',
        name: 'Battery Status Low',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean'
    },
    heiman_battery: {
        id: 'battery',
        prop: 'battery',
        name: 'Battery percent',
        icon: 'img/battery_p.png',
        role: 'battery.percent',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        min: 0,
        max: 100
    },
    shake: {
        id: 'shake',
        prop: 'action',
        name: 'Shake event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'shake') ? true : undefined,
    },
    wakeup: {
        id: 'wakeup',
        prop: 'action',
        name: 'Wakeup event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'wakeup') ? true : undefined,
    },
    fall: {
        id: 'fall',
        prop: 'action',
        name: 'Free fall event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'fall') ? true : undefined,
    },
    tap: {
        id: 'tap',
        prop: 'action',
        name: 'Tapped twice event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'tap') ? true : undefined,
    },
    tap_side: {
        id: 'tap_side',
        prop: 'side',
        name: 'Top side on tap',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'tap') ? payload.side : undefined,
    },
    slide: {
        id: 'slide',
        prop: 'action',
        name: 'Slide event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'slide') ? true : undefined,
    },
    slide_side: {
        id: 'slide_side',
        prop: 'side',
        name: 'Top side on slide',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'slide') ? payload.side : undefined,
    },
    flip180: {
        id: 'flip180',
        prop: 'action',
        name: 'Flip on 180Â°',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'flip180') ? true : undefined,
    },
    flip180_side: {
        id: 'flip180_side',
        prop: 'side',
        name: 'Top side on flip 180Â°',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'flip180') ? payload.side : undefined,
    },
    flip90: {
        id: 'flip90',
        prop: 'action',
        name: 'Flip on 90Â° event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'flip90') ? true : undefined,
    },
    flip90_from: {
        id: 'flip90_from',
        prop: 'from_side',
        name: 'From top side on flip 90Â°',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'flip90') ? payload.from_side : undefined,
    },
    flip90_to: {
        id: 'flip90_to',
        prop: 'to_side',
        name: 'To top side on flip 90Â°',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'flip90') ? payload.to_side : undefined,
    },
    rotate_left: {
        id: 'rotate_left',
        prop: 'action',
        name: 'Rotate left event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'rotate_left') ? true : undefined,
    },
    rotate_right: {
        id: 'rotate_right',
        prop: 'action',
        name: 'Rotate right event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'rotate_right') ? true : undefined,
    },
    rotate_angle: {
        id: 'rotate_angle',
        prop: 'angle',
        name: 'Rotate angle',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    load_power: {
        id: 'load_power',
        prop: 'power',
        name: 'Load power',
        icon: undefined,
        role: 'value.power',
        write: false,
        read: true,
        type: 'number',
        unit: 'W'
    },
    plug_voltage: {
        id: 'voltage',
        name: 'Load voltage',
        icon: undefined,
        role: 'value',
        write: false,
        read: true,
        type: 'number',
        unit: 'V'
    },
    load_current: {
        id: 'current',
        prop: 'current',
        name: 'Load current',
        icon: undefined,
        role: 'value',
        write: false,
        read: true,
        type: 'number',
        unit: 'A'
    },
    plug_consumption: {
        id: 'consumption',
        name: 'Consumption',
        icon: undefined,
        role: 'value',
        write: false,
        read: true,
        type: 'number',
    },
    plug_temperature: {
        id: 'temperature',
        name: 'Temperature',
        icon: undefined,
        role: 'value',
        write: false,
        read: true,
        type: 'number',
    },
    brightness_readonly: {
        id: 'brightness',
        name: 'Brightness',
        icon: undefined,
        role: 'level.dimmer',
        write: false,
        read: true,
        type: 'number',
        unit: '',
        min: 0,
        max: 100,
        // transform from 0..100 to 0..254
        getter: payload => {
            if (payload.brightness) {
                return Math.round(payload.brightness*100/254);
            } else {
                return payload.brightness;
            }
        },
    },
    brightness: {
        id: 'brightness',
        name: 'Brightness',
        icon: undefined,
        role: 'level.dimmer',
        write: true,
        read: true,
        type: 'number',
        unit: '',
        min: 0,
        max: 100,
        // transform from 0..100 to 0..254
        getter: payload => {
            if (payload.brightness) {
                return Math.round(payload.brightness * 100 / 254);
            } else {
                return payload.brightness;
            }
        },
        setter: (value, options) => {
            if (value) {
                return Math.round(value * 254 / 100);
            } else {
                return value;
            }
        },
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            let preparedOptions = {transition: transitionTime};
            if (value) {
                preparedOptions.brightness = Math.round(value * 254 / 100);
            } else {
                preparedOptions.brightness = 0;
            }
            return preparedOptions;
        },
        readResponse: (resp) => {
            const respObj = resp[0];
            if (respObj.status === 0 && respObj.attrData != undefined) {
                return Math.round(respObj.attrData * 100 / 254);
            }
        },
    },
    colortemp: {
        id: 'colortemp',
        prop: 'color_temp',
        name: 'Color temperature',
        icon: undefined,
        role: 'level.color.temperature',
        write: true,
        read: true,
        type: 'number',
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            return {transition: transitionTime};
        },
    },
    color: {
        id: 'color',
        prop: 'color',
        name: 'Color',
        icon: undefined,
        role: 'level.color.rgb',
        write: true,
        read: true,
        type: 'string',
        setter: (value) => {
            // convert RGB to XY for set
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(value);
            let xy = [0, 0];
            if (result) {
                const r = parseInt(result[1], 16),
                    g = parseInt(result[2], 16),
                    b = parseInt(result[3], 16);
                xy = rgb.rgb_to_cie(r, g, b);
            }
            return {
                x: xy[0],
                y: xy[1]
            };
        },
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            return {transition: transitionTime};
        },
    },
    transition_time: {
        id: 'transition_time',
        name: 'Transition time',
        icon: undefined,
        role: 'state',
        write: true,
        read: false,
        type: 'number',
        unit: 'sec',
        isOption: true,
    },
    operation_mode: {
        id: 'decoupled',
        prop: 'operation_mode',
        name: 'Decoupled mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => {
            return {button: 'single', state: value ? 'decoupled' : 'control_relay'}
        },
    },
    operation_mode_left: {
        id: 'decoupled_left',
        prop: 'operation_mode',
        name: 'Left decoupled mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => {
            return {button: 'left', state: value ? 'decoupled' : 'control_left_relay'}
        },
    },
    operation_mode_right: {
        id: 'decoupled_right',
        prop: 'operation_mode',
        name: 'Right decoupled mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => {
            return {button: 'right', state: value ? 'decoupled' : 'control_right_relay'}
        },
    },
    temp_calibration: {
        id: 'temperature_calibration',
        prop: 'temperature_calibration',
        name: 'Temperature Calibration Offset',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: 'Â°C',
        isOption: true,
    },
    illuminance_calibration: {
        id: 'illuminance_calibration',
        prop: 'illuminance_calibration',
        name: 'Illuminance Calibration Percentage',
        icon: undefined,
        role: 'value.brightness',
        write: true,
        read: true,
        type: 'number',
        unit: '%',
        isOption: true,
    },
// osram switch mini
   switch_circle: {
        id: 'circle',
        prop: 'click',
        name: 'Circle State',
        icon: undefined,
        role: 'switch',
        write: false,
        read: true,
        type: 'string',
        getter: payload => payload.click,
    },
    switch_state: {
        id: 'state',
        prop: 'action',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.action === 'up') ? 'up' : (payload.action === 'down') ? 'down' : undefined,
    },
    switch_hold: {
        id: 'hold',
        prop: 'action',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.action === 'on_hold') ? 'up' : (payload.action === 'off_hold') ? 'down' : undefined,
    },

    // new RWL states
    rwl_state: {
        id: 'state',
        prop: 'action',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'on-press') ? true : (payload.action === 'off-press') ? false : undefined,
    },
    rwl_up_button: {
        id: 'up_button',
        prop: 'action',
        name: 'Up button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'up-press') ? true : undefined
    },
    rwl_up_hold: {
        id: 'up_hold',
        prop: 'action',
        name: 'Up button hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'up-hold') ? true : undefined
    },
    rwl_down_button: {
        id: 'down_button',
        prop: 'action',
        name: 'Down button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'down-press') ? true : undefined
    },
    rwl_down_hold: {
        id: 'down_hold',
        prop: 'action',
        name: 'Down button hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'down-hold') ? true : undefined
    },
    rwl_counter: {
        id: 'click_count',
        prop: 'counter',
        name: 'Click count per action',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    rwl_duration: {
        id: 'press_duration',
        prop: 'duration',
        name: 'Press duration',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    rwl_multiple_press_timeout: {
        id: 'multiple_press_timeout',
        prop: 'multiple_press_timeout',
        name: 'Multiple press timeout',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: 'sec',
        isOption: true,
    },
    sml_sensitivity: {
        id: 'motion_sensitivity',
        prop: 'motion_sensitivity',
        name: 'Motion Sensitivity (0-2)',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        min:  0,
        max:  2,
        epname: 'ep2',
    },
    occupancy_timeout: {
        id: 'occupancy_timeout',
        name: 'Occupancy timeout',
        icon: undefined,
        role: 'state',
        write: true,
        read: false,
        type: 'number',
        unit: 'sec',
        isOption: true,
    },
    DNCKAT_state_1: {
        id: 'state_1',
        prop: 'state_left',
        name: 'Switch state 1',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_left === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'left',
    },
    DNCKAT_state_2: {
        id: 'state_2',
        prop: 'state_right',
        name: 'Switch state 2',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_right === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'right',
    },
    DNCKAT_state_3: {
        id: 'state_3',
        prop: 'state_center',
        name: 'Switch state 3',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_center === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'center',
    },
    DNCKAT_state_41: {
        id: 'state_1',
        prop: 'state_bottom_left',
        name: 'Switch state 1',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_bottom_left === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'bottom_left',
    },
    DNCKAT_state_42: {
        id: 'state_2',
        prop: 'state_bottom_right',
        name: 'Switch state 2',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_bottom_right === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'bottom_right',
    },
    DNCKAT_state_43: {
        id: 'state_3',
        prop: 'state_top_left',
        name: 'Switch state 3',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_top_left === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'top_left',
    },
    DNCKAT_state_44: {
        id: 'state_4',
        prop: 'state_top_right',
        name: 'Switch state 4',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_top_right === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'top_right',
    },
    vibration_action: {
        id: 'vibration',
        prop: 'action',
        name: 'Vibration event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'vibration') ? true : undefined,
    },
    tilt_action: {
        id: 'tilt',
        prop: 'action',
        name: 'Tilt event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'tilt') ? true : undefined,
    },
    drop_action: {
        id: 'drop',
        prop: 'action',
        name: 'Drop event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'drop') ? true : undefined,
    },
    tilt_angle: {
        id: 'tilt_angle',
        prop: 'angle',
        name: 'Tilt angle',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    tilt_angle_x: {
        id: 'tilt_angle_x',
        prop: 'angle_x',
        name: 'Tilt angle X',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    tilt_angle_y: {
        id: 'tilt_angle_y',
        prop: 'angle_y',
        name: 'Tilt angle Y',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    tilt_angle_z: {
        id: 'tilt_angle_z',
        prop: 'angle_z',
        name: 'Tilt angle Z',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    tilt_angle_x_abs: {
        id: 'tilt_angle_x_abs',
        prop: 'angle_x_absolute',
        name: 'Tilt angle X absolute ',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    tilt_angle_y_abs: {
        id: 'tilt_angle_y_abs',
        prop: 'angle_y_absolute',
        name: 'Tilt angle Y absolute',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    E1524_toggle: {
        id: 'toggle',
        prop: 'action',
        name: 'Toggle event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'toggle') ? true : undefined,
    },
    E1524_hold: {
        id: 'hold',
        prop: 'action',
        name: 'Hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'toggle_hold') ? true : undefined,
    },
    E1524_left_click: {
        id: 'left_click',
        prop: 'action',
        name: 'Left click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'arrow_left_click') ? true : undefined,
    },
    E1524_right_click: {
        id: 'right_click',
        prop: 'action',
        name: 'Right click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'arrow_right_click') ? true : undefined,
    },
    E1524_left_button: {
        id: 'left_button',
        prop: 'action',
        name: 'Left button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'arrow_left_hold') ? true : (payload.action === 'arrow_left_release') ? false : undefined,
    },
    E1524_right_button: {
        id: 'right_button',
        prop: 'action',
        name: 'Right button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'arrow_right_hold') ? true : (payload.action === 'arrow_right_release') ? false : undefined,
    },

    E1524_up_click: {
        id: 'up_click',
        prop: 'action',
        name: 'Up click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_up_click') ? true : undefined,
    },
    E1524_down_click: {
        id: 'down_click',
        prop: 'action',
        name: 'Down click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_down_click') ? true : undefined,
    },
    E1524_up_button: {
        id: 'up_button',
        prop: 'action',
        name: 'Up button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'brightness_up_hold') ? true : (payload.action === 'brightness_up_release') ? false : undefined,
    },
    E1743_onoff: {
        id: 'state',
        prop: 'click',
        name: 'Switch event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.click === 'on') ? true : ((payload.click === 'off') ? false : undefined),
    },
    E1743_up_button: {
        id: 'up_button',
        prop: 'click',
        name: 'Up button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.click === 'brightness_up') ? true : ((payload.click === 'brightness_stop') ? false : undefined),
    },
    E1743_down_button: {
        id: 'down_button',
        prop: 'click',
        name: 'Down button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.click === 'brightness_down') ? true : ((payload.click === 'brightness_stop') ? false : undefined),
    },
    E1524_down_button: {
        id: 'down_button',
        prop: 'action',
        name: 'Down button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'brightness_down_hold') ? true : (payload.action === 'brightness_down_release') ? false : undefined,
    },
	E1744_play_pause: {
        id: 'play_pause',
        prop: 'action',
        name: 'Play Pause',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'play_pause') ? true : undefined,
    },
	E1744_skip: {
        id: 'skip',
        prop: 'action',
        name: 'Play Pause',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'skip_forward') ? true : ((payload.action === 'skip_backward') ? false : undefined),
    },	
	E1744_move: {
        id: 'move',
        prop: 'action',
        name: 'Dial rotation',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'rotate_right') ? 1 : ((payload.action === 'rotate_left') ? 2 : ((payload.action === 'rotate_stop') ? 0 : undefined)),
    },		
    tint404011_onoff: {
        id: 'state',
        prop: 'action',
        name: 'Switch event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'on') ? true : ((payload.action === 'off') ? false : undefined),
    },
    tint404011_brightness_up_click: {
      id: 'brightness_up_click',
      prop: 'action',
      name: 'Brightness up click event',
      icon: undefined,
      role: 'button',
      write: false,
      read: true,
      type: 'boolean',
      isEvent: true,
      getter: payload => (payload.action === 'brightness_up_click') ? true : undefined,
    },
    tint404011_brightness_up_hold: {
      id: 'brightness_up_hold',
      prop: 'action',
      name: 'Brightness up hold',
      icon: undefined,
      role: 'button',
      write: false,
      read: true,
      type: 'boolean',
      isEvent: false,
      getter: payload => (payload.action === 'brightness_up_hold') ? true : ( payload.action === 'brightness_up_release' ) ? false : undefined,
    },
    tint404011_brightness_down_click: {
      id: 'brightness_down_click',
      prop: 'action',
      name: 'Brightness down click event',
      icon: undefined,
      role: 'button',
      write: false,
      read: true,
      type: 'boolean',
      isEvent: true,
      getter: payload => (payload.action === 'brightness_down_click') ? true : undefined,
    },
    tint404011_brightness_down_hold: {
      id: 'brightness_down_hold',
      prop: 'action',
      name: 'Brightness down hold',
      icon: undefined,
      role: 'button',
      write: false,
      read: true,
      type: 'boolean',
      isEvent: false,
      getter: payload => (payload.action === 'brightness_down_hold') ? true : ( payload.action === 'brightness_down_release' ) ? false : undefined,
    },
    tint404011_colortemp_read: {
      id: 'colortemp',
      prop: 'action',
      name: 'Color temperature',
      icon: undefined,
      role: 'level.color.temperature',
      write: false,
      read: true,
      type: 'number',
      getter: payload => (payload.action === 'color_temp') ? payload.action_color_temperature : undefined,
    },
    tint404011_color_read: {
      id: 'color',
      prop: 'action',
      name: 'Color',
      icon: undefined,
      role: 'level.color.rgb',
      write: false,
      read: true,
      type: 'string',
      getter: (payload) => {
          if( payload.action === 'color_wheel') {
              var colorval = rgb.cie_to_rgb(payload.action_color.x, payload.action_color.y);
              return "#" + utils.decimalToHex(colorval[0]) + utils.decimalToHex(colorval[1]) + utils.decimalToHex(colorval[2]);
          } else {
            return undefined;
          }
      }
    },
    tint404011_scene_working: {
      // 100% brightness neutral-white light.
      id: 'scene_working',
      prop: 'action',
      name: 'Work lights scene selected',
      icon: undefined,
      role: 'button',
      write: false,
      read: true,
      type: 'boolean',
      isEvent: true,
      getter: payload => (payload.action === 'scene3') ? true : undefined,
    },
    tint404011_scene_sunset:  {
      // starting with warm-white light at 50% brightness then dims after 15 minutes.
      // after another 10 minutes the light is turned off
      id: 'scene_sunset',
      prop: 'action',
      name: 'Sunset scene selected',
      icon: undefined,
      role: 'button',
      write: false,
      read: true,
      type: 'boolean',
      isEvent: true,
      getter: payload => (payload.action === 'scene1') ? true : undefined,
    },
    tint404011_scene_party: {
      // colourful continuous change of light color
      id: 'scene_party',
      prop: 'action',
      name: 'Party scene selected',
      icon: undefined,
      role: 'button',
      write: false,
      read: true,
      type: 'boolean',
      isEvent: true,
      getter: payload => (payload.action === 'scene2') ? true : undefined,
    },
    tint404011_scene_nightlight: {
      // warm-white light dimmed to 5%
      id: 'scene_nightlight',
      prop: 'action',
      name: 'Nightlight scene selected',
      icon: undefined,
      role: 'button',
      write: false,
      read: true,
      type: 'boolean',
      isEvent: true,
      getter: payload => (payload.action === 'scene6') ? true : undefined,
    },
    tint404011_scene_bonfire: {
      // simulates a bonfire with flickering colours between orange, red and white
      id: 'scene_bonfire',
      prop: 'action',
      name: 'Bonfire scene selected',
      icon: undefined,
      role: 'button',
      write: false,
      read: true,
      type: 'boolean',
      isEvent: true,
      getter: payload => (payload.action === 'scene4') ? true : undefined,
    },
    tint404011_scene_romance: {
      // constantly transitioning colours between red, violet and pink
      id: 'scene_romance',
      prop: 'action',
      name: 'Romance scene selected',
      icon: undefined,
      role: 'button',
      write: false,
      read: true,
      type: 'boolean',
      isEvent: true,
      getter: payload => (payload.action === 'scene5') ? true : undefined,
    },
    // hvac Thermostat cluster - generic states
    hvacThermostat_local_temp: {
        id: 'local_temp',
        prop: 'local_temperature',
        name: 'Local Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: false,
        read: true,
        type: 'number',
        unit: 'Â°C',
    },
    hvacThermostat_local_temp_calibration: {
        id: 'local_temp_calibration',
        prop: 'local_temperature_calibration',
        name: 'Temperature Calibration',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: 'Â°C',
    },
    hvacThermostat_remote_sensing: {
        id: 'remote_sensing',
        prop: 'remote_sensing',
        name: 'Remote Sensing',
        icon: undefined,
        write: true,
        read: true,
        min:  0,
        max:  7,
        type: 'number',
    },
    hvacThermostat_control_sequence_of_operation: {
        id: 'control_sequence_of_operation',
        prop: 'control_sequence_of_operation',
        name: 'Remote control_sequence_of_operation',
        icon: undefined,
        write: true,
        read: true,
//        type: 'number',
    },
    hvacThermostat_setpoint_raise_lower: {
        id: 'setpoint_raise_lower',
        prop: 'setpoint_raise_lower',
        name: 'Raise or Lower Setpoint',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: 'Â°C',
    },
    hvacThermostat_occupancy: {
        id: 'occupancy',
        prop: 'occupancy',
        name: 'Occupancy',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.occupancy % 1 === 1),
        setter: (value) => (value) ? 1 : 0,
        setattr: 'state',
        epname: 'left',
    },
    hvacThermostat_occupied_heating_setpoint: {
        id: 'heating_setpnt_occupied',
        prop: 'occupied_heating_setpoint',
        name: 'Occupied Target Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: 'Â°C',
    },
    hvacThermostat_unoccupied_heating_setpoint: {
        id: 'heating_setpnt_unoccupied',
        prop: 'unoccupied_heating_setpoint',
        name: 'Unoccupied Target Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: 'Â°C',
    },
    hvacThermostat_weeklySchedule: {
        id: 'weekly_schedule',
        prop: 'weekly_schedule',
        name: 'Weekly Schedule',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_clear_weeklySchedule: {
        id: 'clear_weekly_schedule',
        prop: 'clear_weekly_schedule',
        name: 'Clear Weekly Schedule',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_weekly_schedule_rsp: {
        id: 'weekly_schedule_rsp',
        prop: 'weekly_schedule_rsp',
        name: 'weekly_schedule_rsp',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_relay_status_log: {
        id: 'relay_status_log',
        prop: 'relay_status_log',
        name: 'relay_status_log',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
    },
    hvacThermostat_relay_status_log_rsp: {
        id: 'relay_status_log_rsp',
        prop: 'relay_status_log_rsp',
        name: 'relay_status_log_rsp',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
    },
    hvacThermostat_setpoint_change_amount: {
        id: 'setpoint_change_amount',
        prop: 'setpoint_change_amount',
        name: 'Setpoint Change Amount',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: 'Â°C',
    },
    hvacThermostat_setpoint_change_source: {
        id: 'setpoint_change_source',
        prop: 'setpoint_change_source',
        name: 'Setpoint Change Source',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_setpoint_change_source_timestamp: {
        id: 'setpoint_change_source_timestamp',
        prop: 'setpoint_change_source_timestamp',
        name: 'Setpoint Change Source Timestamp',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_control_sequence_of_operation: {
        id: 'control_sequence_of_operation',
        prop: 'control_sequence_of_operation',
        name: 'control_sequence_of_operation',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_system_mode: {
        id: 'system_mode',
        prop: 'system_mode',
        name: 'System Mode',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_running_mode: {
        id: 'running_mode',
        prop: 'running_mode',
        name: 'Running Mode',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_running_state: {
        id: 'running_state',
        prop: 'running_state',
        name: 'Running State',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    // General hvac defined valve position, not scaled to match Hardware
    hvacThermostat_pi_heating_demand: {
        id: 'heating_demand',
        prop: 'pi_heating_demand',
        name: 'Heating Demand',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },

    // Eurotronic Spirit Zigbee specific states
    // valve position as used by the Eurotronic  Thermostat - raw 0 to 255 scaled to %
    SPBZ0001_auto_valve_position: {
        id: 'heating_demand',
        prop: 'pi_heating_demand',
        name: 'Auto Valve position',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        getter: payload => { return Math.round(payload.pi_heating_demand / 2.55); },
    },
    SPZB0001_valve_position: { //0x4001
        // if trv_mode = 1
        id: 'valve_position',
        prop: 'eurotronic_valve_position',
        name: 'Manual Valve position',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        min: 0,
        max: 100,
        unit: '%',
        setter: value => { return Math.round(value * 2.55); },
        getter: payload => { return Math.round(payload.eurotronic_valve_position / 2.55); },
    },
    SPBZ0001_current_heating_setpoint: { //0x4003
        id: 'heating_setpnt_current',
        prop: 'current_heating_setpoint',
        name: 'Current Target Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: 'Â°C',
        min: 5,
        max: 30,
    },
    SPBZ0001_trv_mode: { //0x4000
        // 1 = manual valve control
        // 2 = auto (default)
        id: 'spz_trv_mode',
        name: 'TRV Mode',
        prop: 'eurotronic_trv_mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
    },
    SPBZ0001_system_mode: { //0x4008
        // if trv_mode = 2
        // bit 1 = rotate display 180
        // bit 2 = boost (in combination with bit 0)
        // bit 5 = Window open (Display shows OFF, auotmatically reset after n minutes)
        //                      Manual reset: Set Bits 4 and 1
        // bit 7 = Child protection
        id: 'spz_system_mode',
        name: 'Thermostat Mode',
        prop: 'eurotronic_system_mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
    },
    SPBZ0001_error_status: { //0x4002
        id: 'spz_error_status',
        name: 'Thermostat Error',
        prop: 'eurotronic_error_status',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },

    natgas_detected: {
      id: 'gas_detected',
      name: 'Natural Gas Detected',
      prop: 'gas',
      icon: undefined,
      role: 'state',
      write: false,
      read: true,
      type: 'boolean',
    },
    natgas_density: {
      id: 'gas_density',
      name: 'Naturl Gas Density',
      prop: 'gas_density',
      icon: undefined,
      role: 'state',
      write: false,
      read: true,
      type: 'number',
    },
    natgas_sensitivity: {
      id: 'gas_sensitivity',
      name: 'Naturl Gas Sensitivity',
      prop: 'sensitivity',
      icon: undefined,
      role: 'state',
      write: true,
      read: true,
      type: 'string', // valid: low, medium, high
    },

    inserted: {
        id: 'inserted',
        prop: 'inserted',
        name: 'Number of inserted key',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.inserted === 'unknown') ? -1 : (payload.inserted === undefined ? null : parseInt(payload.inserted, 10)),
    },
    forgotten: {
        id: 'forgotten',
        prop: 'forgotten',
        name: 'Number of forgotten key',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.forgotten === undefined ? null : parseInt(payload.forgotten)),
    },
    key_error: {
        id: 'key_error',
        prop: 'key_error',
        name: 'Key error',
        icon: undefined,
        role: 'indication.error',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => !!payload.keyerror,
    },
    channel1_state: {
        id: 'channel1_state',
        prop: 'state_l1',
        name: 'Channel 1 switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l1 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l1',
    },
    channel2_state: {
        id: 'channel2_state',
        prop: 'state_l2',
        name: 'Channel 2 switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l2 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l2',
    },
    lock_state: {
        id: 'lockState',
        prop: 'state',
        name: 'Lock state',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'string',
        getter: payload => (payload.state === 'LOCK') ? 'locked' : (payload.state === 'UNLOCK') ? 'unlocked' : undefined,
    },
    DIYRUZ_buzzer: {
        id: 'buzzer',
        prop: 'state_center',
        name: 'Buzzer',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_center === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'center',
    },
    zigup_cputemp: {
        id: 'cpu_temperature',
        prop: 'cpu_temperature',
        name: 'CPU temperature',
        icon: undefined,
        role: 'value.temperature',
        write: false,
        read: true,
        type: 'number',
        unit: 'Â°C',
    },
    zigup_exttemp: {
        id: 'external_temperature',
        prop: 'external_temperature',
        name: 'External temperature',
        icon: undefined,
        role: 'value.temperature',
        write: false,
        read: true,
        type: 'number',
        unit: 'Â°C',
    },
    zigup_exthumi: {
        id: 'external_humidity',
        prop: 'external_humidity',
        name: 'External humidity',
        icon: undefined,
        role: 'value.humidity',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
    },
    zigup_s0counts: {
        id: 's0_counts',
        prop: 's0_counts',
        name: 'S0 Counts',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    zigup_adc_volt: {
        id: 'adc_volt',
        prop: 'adc_volt',
        name: 'ADC volt',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    zigup_diginput: {
        id: 'dig_input',
        prop: 'dig_input',
        name: 'Digital input',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    zigup_reason: {
        id: 'reason',
        prop: 'reason',
        name: 'Reason',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
    },
    curtain_running: {
        id: 'running',
        prop: 'running',
        name: 'Curtain is running',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
    },
    curtain_position: {
        id: 'position',
        prop: 'position',
        name: 'Curtain position',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        min: 0,
        max: 100,
        unit: '%',
        getter: payload => (payload.position !== null) && !isNaN(payload.position) ? payload.position : undefined,
    },
    curtain_stop: {
        id: 'stop',
        setattr: 'position',
        name: 'Stop curtain',
        icon: undefined,
        role: 'button',
        write: true,
        read: true,
        type: 'boolean',
        isEvent: true,
        setter: value => { return {state: 'stop'} },
    },
    hold: {
        id: 'hold',
        prop: 'action',
        name: 'Hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'hold') ? true : (payload.action === 'release') ? false : undefined,
    },
    keypad_btn1: {
        id: 'btn_1',
        name: 'Button 1 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    ZYCT202_stop: {
        id: 'stop',
        prop: 'action',
        name: 'Stop',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'stop') ? true : false,
    },
    ZYCT202_on: {
        id: 'off',
        prop: 'action',
        name: 'On',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'on') ? true : false,
    },
    ZYCT202_off: {
        id: 'off',
        prop: 'action',
        name: 'Off',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'off') ? true : false,
    },
    ZYCT202_up: {
        id: 'up',
        name: 'Up',
        prop: 'action',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'up-press') ? true : false,
    },
    ZYCT202_down: {
        id: 'down',
        name: 'Down',
        prop: 'action',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'down-press') ? true : false,
    },
    keypad_btn2: {
        id: 'btn_2',
        name: 'Button 2 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn3: {
        id: 'btn_3',
        name: 'Button 3 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn4: {
        id: 'btn_4',
        name: 'Button 4 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn5: {
        id: 'btn_5',
        name: 'Button 5 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn6: {
        id: 'btn_6',
        name: 'Button 6 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn7: {
        id: 'btn_7',
        name: 'Button 7 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn8: {
        id: 'btn_8',
        name: 'Button 8 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn9: {
        id: 'btn_9',
        name: 'Button 9 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn10: {
        id: 'btn_10',
        name: 'Button 10 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn11: {
        id: 'btn_11',
        name: 'Button 11 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn12: {
        id: 'btn_12',
        name: 'Button 12 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn13: {
        id: 'btn_13',
        name: 'Button 13 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn14: {
        id: 'btn_14',
        name: 'Button 14 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn15: {
        id: 'btn_15',
        name: 'Button 15 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn16: {
        id: 'btn_16',
        name: 'Button 16 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn17: {
        id: 'btn_17',
        name: 'Button 17 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn18: {
        id: 'btn_18',
        name: 'Button 18 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn19: {
        id: 'btn_19',
        name: 'Button 19 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn20: {
        id: 'btn_20',
        name: 'Button 20 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    occupancy_side: {
        id: 'occupancy_side',
        prop: 'side',
        name: 'Side of occupancy',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.occupancy === true) ? payload.side : undefined,
    },
    btn1_pressed: {
        id: 'btn_1_pressed',
        prop: 'btn_1',
        name: 'Button 1 pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_1 === 'hold') ? true : (payload.btn_1 === 'release') ? false : undefined,
    },
    btn1_click: {
        id: 'btn_1',
        name: 'Button 1 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_1 === 'click') ? true : undefined,
        isEvent: true,
    },
    btn2_pressed: {
        id: 'btn_2_pressed',
        prop: 'btn_2',
        name: 'Button 2 pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_2 === 'hold') ? true : (payload.btn_2 === 'release') ? false : undefined,
    },
    btn2_click: {
        id: 'btn_2',
        name: 'Button 2 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_2 === 'click') ? true : undefined,
        isEvent: true,
    },
    btn3_pressed: {
        id: 'btn_3_pressed',
        prop: 'btn_3',
        name: 'Button 3 pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_3 === 'hold') ? true : (payload.btn_3 === 'release') ? false : undefined,
    },
    btn3_click: {
        id: 'btn_3',
        name: 'Button 3 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_3 === 'click') ? true : undefined,
        isEvent: true,
    },
    btn4_pressed: {
        id: 'btn_4_pressed',
        prop: 'btn_4',
        name: 'Button 4 pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_4 === 'hold') ? true : (payload.btn_4 === 'release') ? false : undefined,
    },
    btn4_click: {
        id: 'btn_4',
        name: 'Button 4 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_4 === 'click') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_1: {
        id: 'button_1_click',
        prop: 'action',
        name: 'Button 1 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_1_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_2: {
        id: 'button_2_click',
        prop: 'action',
        name: 'Button 2 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_2_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_3: {
        id: 'button_3_click',
        prop: 'action',
        name: 'Button 3 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_3_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_3_double: {
        id: 'button_3_double',
        prop: 'action',
        name: 'Button 3 double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_3_double') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_3_hold: {
        id: 'button_3_hold',
        prop: 'action',
        name: 'Button 3 hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_3_hold') ? true : (payload.action === 'button_3_release') ? false : undefined,
    },
    aqara_opple_4: {
        id: 'button_4_click',
        prop: 'action',
        name: 'Button 4 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_4_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_4_double: {
        id: 'button_4_double',
        prop: 'action',
        name: 'Button 4 double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_4_double') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_4_hold: {
        id: 'button_4_hold',
        prop: 'action',
        name: 'Button 4 hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_4_hold') ? true : (payload.action === 'button_4_release') ? false : undefined,
    },
    aqara_opple_5: {
        id: 'button_5_click',
        prop: 'action',
        name: 'Button 5 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_5_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_5_hold: {
        id: 'button_5_hold',
        prop: 'action',
        name: 'Button 5 hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_5_hold') ? true : (payload.action === 'button_5_release') ? false : undefined,
    },
    aqara_opple_6: {
        id: 'button_6_click',
        prop: 'action',
        name: 'Button 6 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_6_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_6_hold: {
        id: 'button_6_hold',
        prop: 'action',
        name: 'Button 6 hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_6_hold') ? true : (payload.action === 'button_6_release') ? false : undefined,
    },
};

// return list of changing states when incoming state is changed
const comb = {
    brightnessAndState: (state, value, options, disableQueue) => {
        // if state is brightness
        if (state.id === states.brightness.id) {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const timeout = (hasTransitionTime ? options.transition_time : 0) * 1000;
            // and new value > 0
            if (value > 0) {
                // turn on light first
                if (disableQueue || !options.state) {
                    return [{
                        stateDesc: states.state,
                        value: true,
                        //index: -1, // before main change
                        //timeout: 0,
                        index: 1, // after main change
                        timeout: timeout,
                    }];
                }
            } else if (disableQueue || options.state) {
                // turn off light after transition time
                return [{
                    stateDesc: states.state,
                    value: false,
                    index: 1, // after main change
                    timeout: timeout,
                }];
            }
        }
    }
};

//return list of states to read after main change has been done
const sync = {
    brightness: (state, value, options) => {
        // if state is brightness
        if (state.id === states.brightness.id) {
            if (value > 0) {
                if (!options.state) {
                    // light is turned on
                    return [{
                        stateDesc: states.state,
                        value: true,
                    }];
                }
            } else if (options.state) {
                // light is turned off
                return [{
                    stateDesc: states.state,
                    value: false,
                }];
            }
        }
    }
};

const lightStatesWithColortemp = [states.state, states.brightness, states.colortemp, states.transition_time];
const lightStatesWithColor = [states.state, states.brightness, states.colortemp, states.color, states.transition_time];
const lightStatesWithColorNoTemp = [states.state, states.brightness, states.color, states.transition_time];
const lightStates = [states.state, states.brightness, states.transition_time];


const devices = [{
        vendor: 'Xiaomi',
        models: ['lumi.sensor_switch'],
        icon: 'img/xiaomi_wireless_switch.png',
        states: [states.click, states.double_click, states.triple_click, states.quad_click,
            states.many_click, states.long_click, states.voltage, states.battery
        ],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_switch.aq2', 'lumi.remote.b1acn01'],
        icon: 'img/aqara.switch.png',
        states: [states.click, states.double_click, states.triple_click, states.quad_click,
            states.voltage, states.battery
        ],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_switch.aq3', 'lumi.sensor_swit'],
        icon: 'img/aqara.switch.png',
        states: [states.click, states.double_click, states.voltage, states.battery,
            states.shake, states.hold],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_86sw1', 'lumi.remote.b186acn01'],
        icon: 'img/86sw1.png',
        states: [states.click, states.double_click, states.voltage, states.battery,
            states.hold],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_86sw2', 'lumi.sensor_86sw2.es1', 'lumi.remote.b286acn01'],
        icon: 'img/86sw2.png',
        states: [states.left_click, states.right_click, states.both_click,
            states.left_click_long, states.left_click_double, states.right_click_long, states.right_click_double,
            states.both_click_long, states.both_click_double, states.voltage, states.battery],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.ctrl_ln1.aq1'],
        icon: 'img/ctrl_ln1.png',
        // TODO: power measurement
        states: [states.click, states.state, states.operation_mode],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.ctrl_ln2.aq1'],
        icon: 'img/ctrl_ln2.png',
        // TODO: power measurement
        states: [states.left_button, states.right_button, states.left_state, states.right_state,
            states.operation_mode_left, states.operation_mode_right, states.left_click, states.right_click],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.ctrl_neutral1'],
        icon: 'img/ctrl_neutral1.png',
        states: [states.stateEp, states.operation_mode,  states.click],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.ctrl_neutral2'],
        icon: 'img/ctrl_neutral2.png',
        states: [states.left_button, states.right_button, states.left_state, states.right_state,
            states.operation_mode_left, states.operation_mode_right, states.left_click, states.right_click],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sens', 'lumi.sensor_ht'],
        icon: 'img/sensor_ht.png',
        states: [states.temperature, states.humidity, states.voltage, states.battery],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.weather'],
        icon: 'img/aqara_temperature_sensor.png',
        states: [states.temperature, states.humidity, states.pressure, states.voltage, states.battery],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_motion'],
        icon: 'img/aqara_numan_body_sensor.png',
        states: [states.occupancy, states.no_motion, states.voltage, states.battery, states.occupancy_timeout],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_motion.aq2'],
        icon: 'img/aqara_numan_body_sensor.png',
        states: [states.occupancy, states.no_motion, states.illuminance, states.voltage, states.battery, states.occupancy_timeout],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_magnet'],
        icon: 'img/magnet.png',
        states: [states.contact, states.opened, states.voltage, states.battery],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_magnet.aq2'],
        icon: 'img/sensor_magnet_aq2.png',
        states: [states.contact, states.opened, states.voltage, states.battery],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_wleak.aq1'],
        icon: 'img/sensor_wleak_aq1.png',
        states: [states.water_detected, states.voltage, states.battery],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_cube', 'lumi.sensor_cube.aqgl01'],
        icon: 'img/cube.png',
        states: [states.shake, states.wakeup, states.fall, states.tap, states.slide, states.flip180,
            states.flip90, states.rotate_left, states.rotate_right, states.voltage, states.battery,
            states.flip90_to, states.flip90_from, states.flip180_side, states.slide_side, states.tap_side,
            states.rotate_angle
        ],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.plug'],
        icon: 'img/plug.png',
        states: [states.state, states.load_power, states.plug_voltage, states.plug_consumption, states.plug_temperature],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.ctrl_86plug.aq1', 'lumi.ctrl_86plug'],
        icon: 'img/86plug.png',
        states: [states.state, states.load_power, states.plug_voltage, states.plug_consumption, states.plug_temperature],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_smoke'],
        icon: 'img/smoke.png',
        states: [states.smoke_detected, states.voltage, states.battery],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.vibration.aq1'],
        icon: 'img/lumi_vibration.png',
        states: [states.voltage, states.battery, states.vibration_action, states.tilt_action,
            states.drop_action, states.tilt_angle, states.tilt_angle_x, states.tilt_angle_y,
            states.tilt_angle_z, states.tilt_angle_x_abs, states.tilt_angle_y_abs,
        ],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.lock.v1'],
        icon: 'img/lumi_lock_v1.png',
        states: [states.inserted, states.forgotten, states.key_error],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.light.aqcn02'],
        icon: 'img/aqara_bulb.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.sensor_natgas'],
        icon: 'img/smoke.png',
        states: [states.natgas_detected, states.natgas_density, states.natgas_sensitivity,
        states.voltage, states.battery],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.relay.c2acn01'],
        icon: 'img/lumi_relay.png',
        states: [states.channel1_state, states.channel2_state, states.load_power, states.temperature],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.curtain'],
        icon: 'img/aqara_curtain.png',
        states: [states.curtain_position, states.curtain_running, states.curtain_stop],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.remote.b286opcn01'],
        icon: 'img/lumi_remote_b286opcn01.png',
        states: [
            states.aqara_opple_1, states.aqara_opple_2,
            states.battery,
        ],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.remote.b486opcn01'],
        icon: 'img/lumi_remote_b486opcn01.png',
        states: [
            states.aqara_opple_1, states.aqara_opple_2,
            states.aqara_opple_3, states.aqara_opple_4,
            states.aqara_opple_3_double, states.aqara_opple_4_double,
            states.battery,
        ],
    },
    {
        vendor: 'Xiaomi',
        models: ['lumi.remote.b686opcn01'],
        icon: 'img/lumi_remote_b686opcn01.png',
        states: [
            states.aqara_opple_1, states.aqara_opple_2,
            states.aqara_opple_3, states.aqara_opple_4,
            states.aqara_opple_3_hold, states.aqara_opple_4_hold,
            states.aqara_opple_5, states.aqara_opple_6,
            states.aqara_opple_5_hold, states.aqara_opple_6_hold,
            states.battery,
        ],
    },

/*
    {
        zigbeeModel: ['lumi.sensor_natgas'],
        model: 'JTQJ-BF-01LM/BW',
        vendor: 'Xiaomi',
        description: 'MiJia gas leak detector ',
        supports: 'gas',
        fromZigbee: [
            fz.JTQJBF01LMBW_gas,
            fz.JTQJBF01LMBW_sensitivity,
            fz.JTQJBF01LMBW_gas_density,
            fz.ignore_basic_change,
        ],
        toZigbee: [tz.JTQJBF01LMBW_sensitivity, tz.JTQJBF01LMBW_selfest],
    },
*/
                 
    // Osram  
	{	
        vendor: 'OSRAM',
        models: ['PAR16 50 TW', 'MR16 TW OSRAM'],
        icon: 'img/lightify-par16.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['PAR 16 50 RGBW - LIGHTIFY'],
        icon: 'img/lightify-par16.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Classic B40 TW - LIGHTIFY'],
        icon: 'img/lightify-b40tw.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Plug 01'],
        icon: 'img/lightify-plug.png',
        states: [states.state],
    },
    {
        vendor: 'OSRAM',
        models: ['Classic A60 RGBW', 'CLA60 RGBW OSRAM', 'CLA60 RGBW Z3'],
        icon: 'img/osram_a60_rgbw.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['LIGHTIFY A19 Tunable White', 'Classic A60 TW', 'CLA60 TW OSRAM', 'TRADFRI bulb E14 WS opal 600lm'],
        icon: 'img/osram_lightify.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Ceiling TW OSRAM'],
        icon: 'img/osram_ceiling_tw.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Flex RGBW', 'LIGHTIFY Indoor Flex RGBW', 'LIGHTIFY Outdoor Flex RGBW'],
        icon: 'img/philips_hue_lst002.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Gardenpole RGBW-Lightify' ],
        icon: 'img/osram_gpole.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: [ 'Gardenpole Mini RGBW OSRAM' ],
        icon: 'img/osram_gpole_mini.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Gardenspot RGB'],
        icon: 'img/osram_g_spot.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Gardenspot W'],
        icon: 'img/osram_g_spot.png',
        states: lightStates,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Classic A60 W clear - LIGHTIFY'],
        icon: 'img/osram_lightify.png',
        states: lightStates,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Surface Light TW'],
        icon: 'img/osram_surface_light_tw.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Surface Light W ï¿½C LIGHTIFY'],
        icon: 'img/osram_surface_light_tw.png',
        states: lightStates,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['B40 DIM Z3'],
        icon: 'img/lightify-b40tw.png',
        states: lightStates,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Outdoor Lantern W RGBW OSRAM'],
        icon: 'img/osram_4058075816718.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'OSRAM',
        models: ['Lightify Switch Mini'],
        icon: 'img/lightify-switch.png',
        states: [states.switch_state, states.switch_circle, states.switch_hold, states.battery],
    },

    {
        vendor: 'OSRAM',
        models: ['Motion Sensor-A'],
        icon: 'img/osram_sensorA.png',
        states: [states.battery, states.occupancy, states.temperature, states.temp_calibration],
    },

    // Hue and Philips
    {
        vendor: 'Philips',
        models: ['LWB010'],
        icon: 'img/philips_hue_white.png',
        states: lightStates,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LLC010'],
        icon: 'img/philips_hue_iris.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LLC012', 'LLC011'],
        icon: 'img/hue_go.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LLC020'],
        icon: 'img/hue_go.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LST001'],
        icon: 'img/philips_hue_lst002.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LST002'],
        icon: 'img/philips_hue_lst002.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LST004'],
        icon: 'img/philips_hue_lst002.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LWB004'],
        icon: 'img/philips_hue_white.png',
        states: lightStates,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LWB006'],
        icon: 'img/philips_hue_white.png',
        states: lightStates,
        syncStates: [sync.brightness],
    },
                 
    {
        vendor: 'Philips',
        models: ['LWA001'],
        icon: 'img/philips_hue_white.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
                 
    {
        vendor: 'Philips',
        models: ['LCT001', 'LCT007', 'LCT010', 'LCT012', 'LCT014', 'LCT015', 'LCT016'],
        icon: 'img/philips_hue_color.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LCT003'],
        icon: 'img/philips_hue_gu10_color.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LTC001'],
        icon: 'img/philips_white_ambiance_being.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LCT024'],
        icon: 'img/philips_hue_lightbar.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LPT001'],
        icon: 'img/philips_hue_bloom.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LTW001','LTW004'],
        icon: 'img/philips_hue_ambiance.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LTW010'],
        icon: 'img/philips_hue_ambiance.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LTW012'],
        icon: 'img/philips_hue_e14_ambiance.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['LTW013'],
        icon: 'img/philips_hue_gu10_ambiance.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Philips',
        models: ['RWL020', 'RWL021'],
        icon: 'img/philips_hue_rwl021.png',
        states: [states.rwl_state, states.rwl_up_button, states.rwl_down_button, states.rwl_down_hold, states.rwl_up_hold, states.battery,
            states.rwl_counter, states.rwl_duration, states.rwl_multiple_press_timeout],
    },
    {
        vendor: 'Philips',
        models: ['SML001'],
        icon: 'img/sensor_philipshue.png',
        states: [states.battery, states.occupancy, states.occupancy_pirOToUDelay, states.temperature, states.illuminance, states.sml_sensitivity,
            states.temp_calibration, states.illuminance_calibration],
        readAfterWriteStates: [states.occupancy_pirOToUDelay, states.sml_sensitivity],
    },
    {
        vendor: 'Philips',
        models: ['SML002'],
        icon: 'img/hue_outdoor_motion.png',
        states: [states.battery, states.occupancy, states.occupancy_pirOToUDelay, states.temperature, states.illuminance, states.sml_sensitivity,
            states.temp_calibration, states.illuminance_calibration],
        readAfterWriteStates: [states.occupancy_pirOToUDelay, states.sml_sensitivity],
    },
    {
        vendor: 'Philips',
        models: ['LOM001'],
        icon: 'img/philips_hue_lom001.png',
        states: [states.state],
    },
    {
        vendor: 'Philips',
        models: ['LWL001'],
        icon: 'img/philips_lwl.png',
        states: [states.state],
    },


    // IKEA
    {
        vendor: 'IKEA',
        models: ['TRADFRI Driver 10W', 'TRADFRI transformer 10W', 'TRADFRI transformer 30W', 'TRADFRI Driver 30W'],
        icon: 'img/lightify-driver.png',
        states: lightStates,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'IKEA',
        models: [
            'TRADFRI bulb E27 WW 806lm',
        ],
        icon: 'img/TRADFRI.bulb.E27.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: [
            'TRADFRI bulb E27 WS opal 980lm', 'TRADFRI bulb E26 WS opal 980lm', 'TRADFRI bulb E27 WS\uFFFDopal 980lm',
            'TRADFRI bulb E27 WW 806lm'],
        icon: 'img/TRADFRI.bulb.E27.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: [
            'TRADFRI bulb E27 WS clear 950lm', 'TRADFRI bulb E26 WS clear 950lm',
        ],
        icon: 'img/TRADFRI.bulb.E27.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: [
            'TRADFRI bulb E27 opal 1000lm', 'TRADFRI bulb E27 W opal 1000lm',
            'TRADFRI bulb E26 opal 1000lm'
        ],
        icon: 'img/TRADFRI.bulb.E27.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI bulb GU10 WS 400lm'],
        icon: 'img/ikea_gu10.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI bulb GU10 W 400lm'],
        icon: 'img/ikea_gu10.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI bulb E14 WS opal 400lm', 'TRADFRI bulb E12 WS opal 400lm'],
        icon: 'img/ikea_e14_bulb.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI bulb E27 CWS opal 600lm'],
        icon: 'img/TRADFRI.bulb.E27.png',
        states: lightStatesWithColorNoTemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI bulb E14 CWS opal 600lm'],
        icon: 'img/ikea_e14_bulb.png',
        states: lightStatesWithColorNoTemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI bulb E14 W op/ch 400lm'],
        icon: 'img/ikea_e14_bulb2.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI transformer 10W', 'TRADFRI transformer 30W'],
        icon: 'img/ikea_transformer.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['FLOALT panel WS', 'FLOALT panel WS 30x30', 'FLOALT panel WS 60x60'],
        icon: 'img/FLOALT.panel.WS.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['FLOALT panel WS 30x90'],
        icon: 'img/FLOALT.panel.WS.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI control outlet'],
        icon: 'img/tradfri-control-outlet.png',
        states: [states.state],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI transformer 10W', 'TRADFRI transformer 30W'],
        icon: 'img/ikea_transformer.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI wireless dimmer','SYMFONISK Sound Controller'],
        icon: 'img/tradfri-wireless-dimmer.png',
        states: [states.brightness_readonly, states.battery],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI remote control'],
        icon: 'img/TRADFRI.remote.control.png',
        states: [states.E1524_toggle, states.E1524_hold,
            states.E1524_left_click, states.E1524_right_click, states.E1524_up_click, states.E1524_down_click,
            states.E1524_left_button, states.E1524_right_button, states.E1524_up_button, states.E1524_down_button,
        ],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI on/off switch'],
        icon: 'img/tradfri.on-off-switch.png',
        states: [states.E1743_onoff, states.E1743_up_button, states.E1743_down_button, states.battery],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI signal repeater'],
        icon: 'img/tradfri.repeater.png',
        states: [],
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI motion sensor'],
        icon: 'img/ikea_motion_sensor.png',
        states: [states.occupancy, states.battery, states.no_motion]
    },
    {
        vendor: 'IKEA',
        models: ['TRADFRI Driver 10W', 'TRADFRI transformer 10W', 'TRADFRI transformer 30W', 'TRADFRI Driver 30W'],
        icon: 'img/ikea_transformer.png',
        states: lightStates,
        syncStates: [sync.brightness],
    },

    // Hive
    {
        vendor: 'Hive',
        models: ['FWBulb01'],
        icon: 'img/hive.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    // Illuminize
    {
        vendor: 'Illuminize',
        models: ['511.201'],
        icon: 'img/illuminize.511.201.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },

    // Innr
    {
        vendor: 'Innr',
        models: ['RB 185 C', 'RB 285 C', 'RB 250 C'],
        icon: 'img/innr.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Innr',
        models: ['BY 185 C', 'BY 285 C'],
        icon: 'img/innr4.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Innr',
        models: [
            'RB 165', 'RB 175 W', 'RS 125', 'RB 178 T', 'RB 145', 'PL 110', 'ST 110', 'UC 110',
            'DL 110 N', 'DL 110 W', 'SL 110 N', 'SL 110 M', 'SL 110 W', 'RS 125', 'RB 256', 'RB 265',
            'RF 265', 'RS 225'
        ],
        icon: 'img/innr1.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Innr',
        models: ['RS 128 T'],
        icon: 'img/innr2.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Innr',
        models: ['RS 248 T', 'RB 148 T'],
        icon: 'img/innr3.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Innr',
        models: ['RB 245'],
        icon: 'img/innr3.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Innr',
        models: ['SP 120'],
        icon: 'img/innr_plug.png',
        states: [states.state,states.load_power],
    },
    // Lingan
    {
        vendor: 'Lingan',
        models: ['SA-003-Zigbee'],
        icon: 'img/lamp_01.png',
        // TODO: description, type, rssi
        states: [states.state],
    },
    // Sylvania
    {
        vendor: 'Sylvania',
        models: ['LIGHTIFY RT Tunable White'],
        icon: 'img/sylvania_rt.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Sylvania',
        models: ['LIGHTIFY BR Tunable White'],
        icon: 'img/sylvania_br.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },

    // GE
    {
        vendor: 'GE',
        models: ['45852'],
        icon: 'img/ge_bulb.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },

    // Sengled
    {
        vendor: 'Sengled',
        models: ['E11-G13'],
        icon: 'img/sengled.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },

    // JIAWEN
    {
        vendor: 'JIAWEN',
        models: ['FB56-ZCW08KU1.1', 'FB56-ZCW08KU1.2'],
        icon: 'img/jiawen.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },

    // Belkin
    {
        vendor: 'Belkin',
        models: ['MZ100'],
        icon: 'img/wemo.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },

    // EDP
    {
        vendor: 'EDP',
        models: ['ZB-SmartPlug-1.0.0'],
        icon: 'img/edp_redy_plug.png',
        // TODO: power measurement
        states: [states.state],
    },

    // Custom devices (DiY)
    {
        vendor: 'Custom devices (DiY)',
        models: ['lumi.router'],
        icon: 'img/lumi_router.png',
        // TODO: description, type, rssi
        states: [states.state],
    },
    {
        vendor: 'Custom devices (DiY)',
        models: ['DNCKAT_S001'],
        icon: 'img/diy.png',
        // TODO: description, type, rssi
        states: [states.DNCKAT_state_1],
    },
    {
        vendor: 'Custom devices (DiY)',
        models: ['DNCKAT_S002'],
        icon: 'img/diy.png',
        // TODO: description, type, rssi
        states: [states.DNCKAT_state_1, states.DNCKAT_state_2],
    },
    {
        vendor: 'Custom devices (DiY)',
        models: ['DNCKAT_S003'],
        icon: 'img/diy.png',
        // TODO: description, type, rssi
        states: [states.DNCKAT_state_1, states.DNCKAT_state_2, states.DNCKAT_state_3],
    },
    {
        vendor: 'Custom devices (DiY)',
        models: ['DNCKAT_S004'],
        icon: 'img/diy.png',
        // TODO: description, type, rssi
        states: [states.DNCKAT_state_41, states.DNCKAT_state_42, states.DNCKAT_state_43, states.DNCKAT_state_44],
    },
    {
        vendor: 'DIYRuZ',
        models: ['DIYRUZ_R4_5'],
        icon: 'img/DIYRuZ.png',
        states: [states.DNCKAT_state_41, states.DNCKAT_state_42, states.DNCKAT_state_43, states.DNCKAT_state_44, states.DIYRUZ_buzzer],
    },
    {
        vendor: 'Custom devices (DiY)',
        models: ['ZigUP'],
        icon: 'img/diy.png',
        states: [
            states.state,
            states.zigup_cputemp,
            states.zigup_exttemp,
            states.zigup_exthumi,
            states.zigup_s0counts,
            states.zigup_adc_volt,
            states.zigup_diginput,
            states.zigup_reason,
            states.color,
        ],
    },
    {
        vendor: 'DIYRuZ',
        models: ['DIYRuZ_KEYPAD20'],
        icon: 'img/DIYRuZ.png',
        states: [states.voltage,states.battery,
            states.keypad_btn1, states.keypad_btn2, states.keypad_btn3, states.keypad_btn4, states.keypad_btn5,
            states.keypad_btn6, states.keypad_btn7, states.keypad_btn8, states.keypad_btn9, states.keypad_btn10,
            states.keypad_btn11, states.keypad_btn12, states.keypad_btn13, states.keypad_btn14, states.keypad_btn15,
            states.keypad_btn16, states.keypad_btn17, states.keypad_btn18, states.keypad_btn19, states.keypad_btn20
        ],
    },
    {
        vendor: 'DIYRuZ',
        models: ['DIYRuZ_magnet'],
        icon: 'img/DIYRuZ.png',
        states: [states.contact, states.opened, states.voltage, states.battery],
    },
    {
        vendor: 'DIYRuZ',
        models: ['DYRuZ_rspm'],
        icon: 'img/DIYRuZ.png',
        states: [
            states.state,
            states.zigup_cputemp,
            states.load_power,
            states.load_current,
            states.hold,
            states.temperature,
        ],
    },
    {
        vendor: 'HUEUC',
        models: ['HOMA2023'],
        icon: 'img/dimmablelight.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },

    // Paulmann
    {
        vendor: 'Paulmann',
        models: ['Dimmablelight'],
        icon: 'img/dimmablelight.png',
        states: lightStates,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Paulmann',
        models: ['Switch Controller'],
        icon: 'img/dimmablelight.png',
        states: [states.state],
    },
    {
        vendor: 'Paulmann',
        models: ['RGBW light'],
        icon: 'img/paulmann_rgbw_controller.png',
        states: lightStatesWithColor,
        syncStates: [sync.brightness],
    },
    {
        vendor: 'Paulmann',
        models: ['CCT light'],
        icon: 'img/paulmann_spot.png',
        states: lightStatesWithColortemp,
        syncStates: [sync.brightness],
    },
                 
    {
        vendor: 'Paulmann',
        models: ['Switch Controller '],
        icon: 'img/dimmablelight.png',
        states: [states.state],
    },
 
                 
    // Ksentry
    {
        vendor: 'Ksentry',
        models: ['Lamp_01'],
        icon: 'img/lamp_01.png',
        // TODO: description, type, rssi
        states: [states.state],
    },
    // Gledopto

    {
        vendor: 'Gledopto',
        models: ['GL-B-008Z', 'GL-B-001Z'],
        icon: 'img/gledopto_bulb.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Gledopto',
        models: ['GLEDOPTO', 'GL-C-008', 'GL-C-007'],
        icon: 'img/gledopto.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Gledopto',
        models: ['GL-C-006', 'GL-C-009'],
        icon: 'img/gledopto.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Gledopto',
        models: ['GL-D-003Z'],
        icon: 'img/gld003z.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Gledopto',
        models: ['GL-G-001Z', 'GL-FL-004TZ'],
        icon: 'img/gledopto_spot.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Gledopto',
        models: ['GL-S-007Z'],
        icon: 'img/gledopto_gu10.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    // Dresden Elektronik
    {
        vendor: 'Dresden Elektronik',
        models: ['FLS-PP3'],
        icon: 'img/flspp3.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Dresden Elektronik',
        models: ['FLS-CT'],
        icon: 'img/flspp3.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    // ilux
    {
        vendor: 'ilux',
        models: ['LEColorLight'],
        icon: 'img/lecolorlight.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    // Heiman
    {
        vendor: 'Heiman',
        models: ['SMOK_V16', 'b5db59bfd81e4f1f95dc57fdbba17931', 'SMOK_YDLV10', 'SmokeSensor-EM', 'SmokeSensor-N'],
        icon: 'img/hs1sa.png',
        states: [states.smoke_detected2, states.battery, states.heiman_batt_low],
    },
    {
        vendor: 'Heiman',
        models: ['COSensor-EM', 'COSensor-N'],
        icon: 'img/hs1sa.png',
        states: [states.co_detected, states.battery, states.heiman_batt_low],
    },
    {
        vendor: 'Heiman',
        models: ['SmartPlug'],
        icon: 'img/hs2sk.png',
        states: [states.state, states.load_power, states.load_current, states.plug_voltage],
    },

    {
        vendor: 'Smart Home Pty',
        models: ['FNB56-SKT1EHG1.2', 'FNB56-SKT1JXN1.0'],
        icon: 'img/smarthomepty_plug.png',
        states: [states.state],
    },
    {
        vendor: 'Smart Home Pty',
        models: ['FB56-ZCW11HG1.2'],
        icon: 'img/sylvania_rt.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    // MÃ¼ller Licht
    {
        vendor: 'Mueller Licht',
        models: ['ZBT-ExtendedColor'],
        icon: 'img/zbt_e27_rgbw.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Mueller Licht',
        models: ['ZBT-ColorTemperature'],
        icon: 'img/zbt_e27.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Mueller Licht',
        models: ['ZBT-Remote-ALL-RGBW'],
        icon: 'img/zbt_remote.png',
        states: [
          states.tint404011_scene_sunset, states.tint404011_scene_party,
          states.tint404011_scene_nightlight, states.tint404011_scene_working,
          states.tint404011_scene_bonfire, states.tint404011_scene_romance,
          states.tint404011_brightness_up_click, states.tint404011_brightness_down_click,
          states.tint404011_colortemp_read, states.tint404011_color_read,
          states.tint404011_onoff, states.tint404011_brightness_up_hold,
          states.tint404011_brightness_down_hold
        ]
    },
                 
    {
        vendor: 'Mueller Licht',
        models: ['RGBW Lighting'],
        icon: 'img/philips_hue_lst002.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },      
                 
    {
        vendor: 'Mueller Licht',
        models: ['tint Smart Switch'],
        icon: 'img/zbt_smart_switch.png',
        tates: [states.state],
    },                        
                 
    // Ninja Blocks
    {
        vendor: 'Ninja Blocks Inc',
        models: ['Ninja Smart plug'],
        icon: 'img/ninja_plug.png',
        states: [states.state, states.load_power],
    },
    // Paul Neuhaus
    {
        vendor: 'Paul Neuhaus',
        models: ['NLG-CCT light'],
        icon: 'img/q-inigo_led_ceiling_light.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Paul Neuhaus',
        models: ['NLG-RGBW light'],
        icon: 'img/q-flag_led_panel.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    // Eurotronic
    {
        vendor: 'Eurotronic',
        models: ['SPZB0001'],
        icon: 'img/Eurotronic_Spirit_04.png',
        states: [states.battery,
        states.hvacThermostat_local_temp, states.hvacThermostat_local_temp_calibration,
        states.SPBZ0001_current_heating_setpoint, states.SPBZ0001_error_status,
        states.SPZB0001_valve_position, states.SPBZ0001_auto_valve_position,
        states.SPBZ0001_system_mode, states.SPBZ0001_trv_mode],
    },
    // Immax
    {
        vendor: 'Immax',
        models: ['IM-Z3.0-DIM'],
        icon: 'img/immax_e14.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    // Bitron
    {
        vendor: 'Bitron',
        models: ['902010/25'],
        icon: 'img/bitron_plug.png',
        states: [states.state, states.load_power],
    },
    // Sunricher
    {
        vendor: 'Sunricher',
        models: ['ZG9101SAC-HP'],
        icon: 'img/sunricher_dimmer.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    // Nue / 3A
    {
        vendor: 'Nue / 3A',
        models: ['FNB56-ZSW01LX2.0'],
        icon: 'img/fnb56zsw01.png',
        // TODO: description, type, rssi
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Nue / 3A',
        models: ['FNB56-ZCW25FB1.9'],
        icon: 'img/fnb56zsw01.png',
        // TODO: description, type, rssi
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    {
         vendor: 'Nue / 3A',
         models: ['FNB56-ZSW01LX2.0'],
         icon: 'img/nue_hgzb-02a.png',
         // TODO: description, type, rssi
         states: lightStates,
         linkedStates: [comb.brightnessAndState],
    },
    // eCozy
    {
      vendor: 'eCozy GmbH',
      models: ['Thermostat'],
      icon: 'img/ecozy.png',
      states: [
//        states.factory_reset,
        states.hvacThermostat_local_temp,
        states.hvacThermostat_local_temp_calibration,
        states.hvacThermostat_occupancy,
        states.hvacThermostat_occupied_heating_setpoint,
        states.hvacThermostat_unoccupied_heating_setpoint,
        states.hvacThermostat_setpoint_raise_lower,
        states.hvacThermostat_remote_sensing,
        states.hvacThermostat_control_sequence_of_operation,
//        states.hvacThermostat_weeklyShedule,
//        states.hvacThermostat_clear_weeklySchedule,
        states.hvacThermostat_system_mode,
//        states.hvacThermostat_weekly_schedule_rsp,
//        states.hvacThermostat_relay_status_log,
//        states.hvacThermostat_relay_status_log_rsp,
        states.ecozy_voltage]
    },
    // Shenzhen Homa
    {
        vendor: 'Shenzhen Homa',
        models: ['HOMA1008', 'HOMA1031'],
        icon: 'img/smart_led_driver.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    // Danalock
    {
        vendor: 'Danalock',
        models: ['V3-BTZB'],
        icon: 'img/danalock_v3.png',
        states: [states.lock_state, states.battery, states.heiman_batt_low],
    },
    // Trust
    {
        vendor: 'Trust',
        models: ['CSW_ADUROLIGHT'],
        icon: 'img/sensor_magnet_aq2.png',
        states: [states.contact, states.opened, states.voltage, states.battery],
    },
    {
        vendor: 'Trust',
        models: ['ZLL-DimmableLigh'],
        icon: 'img/wemo.png',
        states: lightStates,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Trust',
        models: ['ZLL-ColorTempera'],
        icon: 'img/trust_tune9.png',
        states: lightStatesWithColortemp,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Trust',
        models: ['ZLL-ExtendedColo'],
        icon: 'img/zbt_e27_rgbw.png',
        states: lightStatesWithColor,
        linkedStates: [comb.brightnessAndState],
    },
    {
        vendor: 'Trust',
        models: ['\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000'+
                      '\u0000\u0000\u0000\u0000\u0000'],
        icon: 'img/gibtmichnochnicht.png',
        states: [states.battery, states.ZYCT202_down,states.ZYCT202_up,
                 states.ZYCT202_off,states.ZYCT202_on,states.ZYCT202_stop],
    },
    // Konke
    {
        vendor: 'Konke',
        models: ['3AFE170100510001'],
        icon: 'img/konke_kpkey.png',
        states: [states.click, states.double_click, states.long_click, states.battery, states.voltage],
    },
    {
        vendor: 'Konke',
        models: ['3AFE14010402000D'],
        icon: 'img/konke_kpbs.png',
        states: [states.battery, states.voltage, states.occupancy_event],
    },
    {
        vendor: 'Konke',
        models: ['3AFE140103020000'],
        icon: 'img/konke_kpft.png',
        states: [states.battery, states.voltage, states.temperature, states.humidity],
    },
    {
        vendor: 'Konke',
        models: ['3AFE130104020015'],
        icon: 'img/konke_kpdr.png',
        states: [states.battery, states.voltage, states.contact, states.opened],
    },
    // Tuya
    {
        vendor: 'Tuya',
        models: ['RH3052'],
        icon: 'img/tuya_RH3052.png',
        states: [states.temperature, states.humidity, states.voltage, states.battery],
    },
    // Zemismart
    {
        vendor: 'Zemismart',
        models: ['TS0002'],
        icon: 'img/zemismart_sw2.png',
        states: [states.channel1_state, states.channel2_state],
    },
    // Lonsonho
    {
        vendor: 'Lonsonho',
        models: ['Plug_01'],
        icon: 'img/lonsonho_plug.png',
        states: [states.state],
    },
    // iHORN
    {
        vendor: 'iHORN',
        models: ['113D'],
        icon: 'img/LH-32ZB.png',
        states: [states.temperature, states.humidity, states.voltage, states.battery],
    },
    // ITEAD
    {
        vendor: 'ITEAD',
        models: ['BASICZBR3'],
        icon: 'img/basiczbr3.png',
        states: [states.state],
    },
    // TERNCY
    {
        vendor: 'TERNCY',
        models: ['TERNCY-PP01'],   
        icon: 'img/terncy_pp01.png',
        states: [
            states.temperature, states.occupancy, states.occupancy_side, states.no_motion,
            states.illuminance, states.battery, states.click, states.double_click, states.triple_click,
        ],
    },
    // ORVIBO
    {
        vendor: 'ORVIBO',
        models: ['3c4e4fc81ed442efaf69353effcdfc5f'],   
        icon: 'img/orvibo_cr11s8uz.png',
        states: [
            states.btn1_click, states.btn2_click, states.btn3_click, states.btn4_click,
            states.btn1_pressed, states.btn2_pressed, states.btn3_pressed, states.btn4_pressed,
        ],
    },
];

const commonStates = [
    states.link_quality,
    states.available
];

const groupStates = [].concat(lightStatesWithColor);

const byZigbeeModel = new Map();
for (const device of devices) {
    for (const zigbeeModel of device.models) {
        const stripModel = zigbeeModel.replace(/\0.*$/g, '').trim();
        byZigbeeModel.set(stripModel, device);
    }
}

module.exports = {
    devices: devices,
    commonStates: commonStates,
    groupStates: groupStates,
    groupsState: states.groups,
    findModel: (model) => {
        const stripModel = (model) ? model.replace(/\0.*$/g, '').trim() : '';
        return byZigbeeModel.get(stripModel);
    }
};
